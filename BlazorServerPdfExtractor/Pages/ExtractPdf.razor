@page "/ExtractPdf"
@using System.IO
@using DinkToPdf
@using ExtractLibrary
@using ExtractLibrary.ExtractFromJson
@using ExtractLibrary.Helpers
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using SpecFlowPdfReader.Helpers
@inject IWebHostEnvironment env
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

<h3 class="header">Extract PDF</h3>

<div class="modal @ModalClass" id="myModal">
    <div class="modal-content">
        <span class="close" @onclick="ToggleModal">&times;</span>
        <p>
            After you've uploaded the file, you can click the "Extract Text" button to start the extraction process.<br>
            The application will read the PDF and extract all text and tables. The extracted text is saved as a structured JSON file and tables are saved as .xlsx files.
        </p>
    </div>
</div>

<div class="container">
    <div class="button-row">
        <button class="btn btn-info" @onclick="ToggleModal">Info</button>
        <InputFile OnChange="@HandleFileSelected" MaxFileSize="104857600" disabled="@IsExtracting" />
        <button class="btn btn-primary" @onclick="ButtonClicked" disabled=@(!FileSelected || IsExtracting )>Extract Text</button>
        <button class="btn btn-success" @onclick="GeneratePDFreport" disabled="@(!ViewButtonEnabled)">View</button>
        <button class="btn btn-danger" @onclick="CleanReport">Clean report</button>
    </div>
    <div>
        <textarea class="form-control text-area-spacing" rows="1" cols="40" @bind="MyText"></textarea>
    </div>
</div>

@if (HasSuccess)
{
    <div class="alert alert-success" role="alert">
        Operation was successful! File saved to: @SuccessAlert
    </div>
}

@if (IsLoading)
{
    <div class="alert alert-primary" role="alert">
        Uploading...
    </div>
}

@if (IsExtracting)
{
    <div class="alert alert-primary" role="alert">
        Extracting...
    </div>
}

@if (IsViewLoading)
{
    <div class="alert alert-primary" role="alert">
        Loading report...
    </div>
}

@if (HasError)
{
    <div class="alert alert-danger" role="alert">
        @ErrorAlert
    </div>
}

<iframe class="pdf-frame" src="@($"")" width="100%" height="800px"></iframe>

@code {

    private string MyText { get; set; }
    private string Report { get; set; }
    private bool IsLoading { get; set; }
    private bool IsExtracting { get; set; }
    private bool IsViewLoading { get; set; }
    private string FilePath { get; set; }
    private bool ViewButtonEnabled { get; set; }
    private string pdfSrc { get; set; }
    private bool IsViewClick { get; set; }
    private string uniqueKeyRemove { get; set; } = Guid.NewGuid().ToString();
    private string uniqueKey { get; set; }
    private string _fileName;
    private string _fileSize;
    private string _reportPath;
    private string _tempFoldePath;
    private bool FileSelected { get; set; } = false;
    private bool HasError { get; set; } = false;
    private string ErrorAlert { get; set; }
    private bool ImageExtractSuccess { get; set; } = false;
    private string ModalClass { get; set; } = "modal-hidden";
    private bool HasSuccess { get; set; } = false;
    private string SuccessAlert { get; set; }
    private Tuple<string, string> result;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            string targetFolderPath = JsonHelper.GetFolderTargetForExtract();
            IReadOnlyList<IBrowserFile> selectedFiles;
            selectedFiles = e.GetMultipleFiles();

            IsLoading = true;
            this.StateHasChanged();

            foreach (var file in selectedFiles)
            {
                var uniqueFileName = file.Name + "_" + Guid.NewGuid().ToString() + Path.GetExtension(file.Name);
                var path = $"{targetFolderPath}\\{uniqueFileName}";
                FilePath = path;
               
                _fileName = uniqueFileName;
                _fileSize = file.Size.ToString();

                using (FileStream fs = File.Create(path))
                {
                    const int bufferSize = 10 * 1024 * 1024; // 10 MB buffer size
                    byte[] buffer = new byte[bufferSize];

                    using (Stream stream = file.OpenReadStream(maxAllowedSize: 104857600)) // 100 MB
                    {
                        int bytesRead;
                        while ((bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length)) > 0)
                        {
                            await fs.WriteAsync(buffer, 0, bytesRead);
                        }
                    }
                }
            }
            IsLoading = false;
            FileSelected = true;
            this.StateHasChanged();
        }
        catch (IOException ex)
        {
            HasError = true;
            IsLoading = false;

            ErrorAlert = ex.Message;
            this.StateHasChanged();
        }
    }

    private async Task CleanReport()
    {
        _reportPath = Path.Combine(env.WebRootPath, "reports");
        _tempFoldePath = Path.Combine("tempZip");

        try
        {
            DirectoryInfo reportFolder = new DirectoryInfo(_reportPath);
            if (reportFolder.Exists)
            {
                foreach (FileInfo file in reportFolder.GetFiles())
                {
                    file.Delete();
                }
                foreach (DirectoryInfo dir in reportFolder.GetDirectories())
                {
                    dir.Delete(true);
                }
            }

            DirectoryInfo tempFolder = new DirectoryInfo(_tempFoldePath);
            if (tempFolder.Exists)
            {
                foreach (FileInfo file in tempFolder.GetFiles())
                {
                    file.Delete();
                }
                foreach (DirectoryInfo dir in tempFolder.GetDirectories())
                {
                    dir.Delete(true);
                }
            }
        }
        catch (Exception ex)
        {
            MyText = ex.Message;
        }
    }

    protected override void OnInitialized()
    {
        NavManager.LocationChanged += NavManager_LocationChanged;
    }

    private void NavManager_LocationChanged(object sender, LocationChangedEventArgs e)
    {
        CleanReport();
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= NavManager_LocationChanged;
    }

    private void RemoveIframeSource()
    {
        uniqueKeyRemove = Guid.NewGuid().ToString();
        this.StateHasChanged();
    }

    private void ToggleModal()
    {
        ModalClass = ModalClass == "modal-hidden" ? "modal-visible" : "modal-hidden";
    }

    private async void ButtonClicked()
    {

        string pdfName = FilePath;
        MyText = $"{pdfName} - begin extract";

        try
        {
            IsExtracting = true;
            this.StateHasChanged();

            ExtractPDF extractPDF = new ExtractPDF();
            var result = await extractPDF.ExtractTextFromPDF(pdfName);

            if (result.Item1 != "Success")
            {
                ErrorAlert = $"Error: {result.Item1}";
                HasError = true;
            }
            else
            {
                SuccessAlert = result.Item2;
                HasSuccess = true;
                HasError = false;
            }

            IsExtracting = false;
            ViewButtonEnabled = true;
            this.StateHasChanged();

        }
        catch (Exception ex)
        {
            MyText = $"Error: {ex.Message}";
        }
    }

    private async void GeneratePDFreport()
    {
        IsViewLoading = true;
        this.StateHasChanged();
        string jsonFileName = SuccessAlert;

        DateTime now = DateTime.Now;
        MassExctracter massExctracter = new MassExctracter(jsonFileName);
        var titleMess = massExctracter.CountTitle();

        int countHeader = massExctracter.CountElementsTable().Item2;
        int countTableHeader = massExctracter.CountElementsTable().Item1;

        string textTableHeader = string.Join("<br/><hr/>", massExctracter.CountElementsTable().Item3);
        string textHeader = string.Join("<br/><hr/>", massExctracter.CountElementsTable().Item4);

        int countCheckBox = massExctracter.CountElementsCheckBox().Item1;
        string textCheckBox = string.Join("<br/><hr/>", massExctracter.CountElementsCheckBox().Item2);

        string fileName = _fileName;
        string fileSize = _fileSize;
        string dateTime = now.ToString();
        int countParagraph = massExctracter.CountElementsSectionParagraph().Item1;
        string textParagraph = string.Join("<br/><hr/>", massExctracter.CountElementsSectionParagraph().Item2);

        int countTable = massExctracter.GetSectionTable().Item1;
        int countTableParagCount = massExctracter.GetSectionTable().Item2;
        int countTableRow = massExctracter.GetSectionTable().Item3;
        int countTableBulletPoint = massExctracter.GetSectionTable().Item4;

        string tableTextParagList = string.Join("<br/><hr/>", massExctracter.GetSectionTable().Item5);
        string tableTextRowList = string.Join("<br/><hr/>", massExctracter.GetSectionTable().Item6);
        string tableTextBulletPointList = string.Join("<br/><hr/>", massExctracter.GetSectionTable().Item7);


        GeneratorPDF generatorPDF = new GeneratorPDF();

        string uniqueKeyForPAth = Guid.NewGuid().ToString().Substring(0, 5);
        await JSRuntime.InvokeVoidAsync("savePdfSrc", uniqueKeyForPAth);

        string outputPath = JsonHelper.ReportPathName(env.WebRootPath, uniqueKeyForPAth).Item1;

        await generatorPDF.GenerateрHTMLFromTitle(
          jsonFileName,
          titleMess,
          countHeader,
          countTableHeader,
          textTableHeader,
          textHeader,
          countCheckBox,
          textCheckBox,
          fileName,
          fileSize,
          dateTime,
          countParagraph,
          textParagraph,
          countTable.ToString(),
          countTableParagCount.ToString(),
          countTableRow.ToString(),
          countTableBulletPoint.ToString(),
          tableTextParagList.ToString(),
          tableTextRowList.ToString(),
          tableTextBulletPointList.ToString(),
          outputPath);

        pdfSrc = uniqueKeyForPAth;
        this.StateHasChanged();
        IsViewLoading = false;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("updateIframeSrc", $"/reports/report_{pdfSrc}.html#zoom=150");
        }
    }
}

<style>
    .container {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }

    .header {
        text-align: center;
        font-family: Arial, sans-serif;
        font-size: 17px;
        color: #007bff;
        font-weight: bold;
        margin-bottom: 20px;
    }

    .button-row {
        display: flex;
        gap: 10px;
        margin-bottom: 10px;
    }

    .form-control {
        margin-bottom: 12px;
    }

    .alert-success {
        color: #155724;
        background-color: #d4edda;
        border-color: #c3e6cb;
    }

    .btn {
        display: inline-block;
        background-color: #007bff;
        border-color: #007bff;
        color: #fff;
        text-align: center;
        vertical-align: middle;
        padding: 6px 12px;
        font-size: 14px;
        line-height: 1.5;
        border-radius: 3px;
        cursor: pointer;
        user-select: none;
        text-decoration: none;
    }

    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }

    .btn-success {
        background-color: #28a745;
        border-color: #28a745;
    }

    .btn[disabled] {
        cursor: not-allowed;
        opacity: 0.65;
        background-color: #007bff;
        border-color: #007bff;
    }

    body .container {
        position: relative;
        top: 60px;
        left: 60px;
    }

    h3 {
        font-size: 24px;
        color: #007bff;
        font-weight: bold;
        margin-bottom: 20px;
    }

    .pdf-frame {
        margin-top: 50px;
        border: 5px solid #007bff;
        border-radius: 15px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .text-area-spacing {
        margin-bottom: 12px;
    }

    .modal-hidden {
        display: none;
    }

    .modal-visible {
        display: block;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
    }
</style>