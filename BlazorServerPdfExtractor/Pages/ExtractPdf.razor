@page "/ExtractPdf"
@using System.IO
@using DinkToPdf
@using ExtractLibrary
@using ExtractLibrary.ExtractFromJson
@using ExtractLibrary.Helpers
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using SpecFlowPdfReader.Helpers
@inject IWebHostEnvironment env

<h3 style="text-align: center; font-family: Arial, sans-serif; margin-bottom: 1rem;">Extract PDF</h3>

<div class="container">
    <div class="button-row">
        <InputFile OnChange="@HandleFileSelected" MaxFileSize="104857600" disabled="@IsExtracting" />
        <button class="btn btn-primary" @onclick="ButtonClicked" disabled=@(!FileSelected || IsExtracting )>Extract Text</button>
        <button class="btn btn-success" @onclick="GeneratePDFreport" disabled="@(!ViewButtonEnabled)">View</button>
        <button class="btn btn-danger" @onclick="CleanReport">Clean report</button>
    </div>
    <div>
        <textarea class="form-control text-area-spacing" rows="1" cols="40" @bind="MyText"></textarea>
    </div>
</div>

@if (IsLoading)
{
    <div class="alert alert-primary" role="alert">
        Uploading...
    </div>
}

@if (IsExtracting)
{
    <div class="alert alert-primary" role="alert">
        Extracting...
    </div>
}

@if (IsViewLoading)
{
    <div class="alert alert-primary" role="alert">
        Loading report...
    </div>
}

@if (HasError)
{
    <div class="alert alert-danger" role="alert">
        @ErrorAlert
    </div>
}

<iframe class="pdf-frame" src="@($"/reports/report.pdf?unique={uniqueKey}#zoom=150")" width="100%" height="800px"></iframe>

<style>
    .container {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }

    .button-row {
        display: flex;
        gap: 10px;
        margin-bottom: 10px;
    }

    .form-control {
        margin-bottom: 12px;
    }

    .btn {
        display: inline-block;
        background-color: #007bff;
        border-color: #007bff;
        color: #fff;
        text-align: center;
        vertical-align: middle;
        padding: 6px 12px;
        font-size: 14px;
        line-height: 1.5;
        border-radius: 3px;
        cursor: pointer;
        user-select: none;
        text-decoration: none;
    }

    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }

    .btn-success {
        background-color: #28a745;
        border-color: #28a745;
    }

    .btn[disabled] {
        cursor: not-allowed;
        opacity: 0.65;
        background-color: #007bff;
        border-color: #007bff;
    }

    body .container {
        position: relative;
        top: 60px;
        left: 60px;
    }

    h3 {
        font-size: 24px;
        color: #007bff;
        font-weight: bold;
        margin-bottom: 20px;
    }

    .pdf-frame {
        margin-top: 50px;
        border: 15px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .text-area-spacing {
        margin-bottom: 12px;
    }
</style>

@code {

    private string MyText { get; set; }
    private string Report { get; set; }
    private bool IsLoading { get; set; }
    private bool IsExtracting { get; set; }
    private bool IsViewLoading { get; set; }
    private string FilePath { get; set; }
    private bool ViewButtonEnabled { get; set; }
    private string pdfSrc { get; set; }
    private bool IsViewClick { get; set; }
    private string uniqueKey { get; set; } = Guid.NewGuid().ToString();
    private string _fileName;
    private string _fileSize;
    private string _reportPath;
    private string _tempFoldePath;
    private bool FileSelected { get; set; } = false;
    private bool HasError { get; set; } = false;
    private string ErrorAlert { get; set; }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        string targetFolderPath = JsonHelper.GetFolderTargetForExtract();
        IReadOnlyList<IBrowserFile> selectedFiles;
        selectedFiles = e.GetMultipleFiles();

        IsLoading = true;
        this.StateHasChanged();

        foreach (var file in selectedFiles)
        {

            var path = $"{targetFolderPath}\\{file.Name}";
            FilePath = path;
            _fileName = file.Name;
            _fileSize = file.Size.ToString();

            FileStream fs = File.Create(path);

            const int bufferSize = 10 * 1024 * 1024; // 10 MB buffer size
            byte[] buffer = new byte[bufferSize];

            using (Stream stream = file.OpenReadStream(maxAllowedSize: 2000000))
            {
                int bytesRead;
                while ((bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length)) > 0)
                {
                    await fs.WriteAsync(buffer, 0, bytesRead);
                }
            }

            fs.Close();
        }
        IsLoading = false;
        FileSelected = true;
        this.StateHasChanged();
    }

    private async void CleanReport()
    {
        _reportPath = Path.Combine(env.WebRootPath, "reports", "report.pdf");
        _tempFoldePath = Path.Combine("tempZip");

        try
        {
            if (File.Exists(_reportPath))
            {
                File.Delete(_reportPath);
                RemoveIframeSource(); // delete Iframe source
            }

            DirectoryInfo tempFolder = new DirectoryInfo(_tempFoldePath);


            if (tempFolder.Exists)
            {
                foreach (FileInfo file in tempFolder.GetFiles())
                {
                    file.Delete();
                }
            }

        }
        catch (Exception ex)
        {
            MyText = ex.Message;
        }
    }

    private void RemoveIframeSource()
    {
        uniqueKey = Guid.NewGuid().ToString();
        this.StateHasChanged(); // Update component
    }

    private async void ButtonClicked()
    {

        string pdfName = FilePath;
        MyText = $"{pdfName} - begin extract";

        try
        {
            IsExtracting = true;
            this.StateHasChanged();

            ExtractPDF extractPDF = new ExtractPDF();
            string result = await extractPDF.ExtractTextFromPDF(pdfName);

            if (result != "Success")
            {
                ErrorAlert = $"Error: {result}";
                HasError = true;
            }
            else
            {
                HasError = false;
            }


            IsExtracting = false;
            ViewButtonEnabled = true; // Update the property here
            this.StateHasChanged();

        }
        catch (Exception ex)
        {
            MyText = $"Error: {ex.Message}";
        }
    }

    private async void GeneratePDFreport()
    {
        IsViewLoading = true;
        this.StateHasChanged();

        DateTime now = DateTime.Now;
        MassExctracter massExctracter = new MassExctracter();
        var titleMess = massExctracter.CountTitle();

        int countTableHeader = massExctracter.CountElementsTable().Item1;
        int countHeader = massExctracter.CountElementsTable().Item2;

        string textTableHeader = string.Join("br/", massExctracter.CountElementsTable().Item3);
        string textHeader = string.Join("br/", massExctracter.CountElementsTable().Item4);


        int countCheckBox = massExctracter.CountElementsCheckBox().Item1;
        string textCheckBox = string.Join("br/", massExctracter.CountElementsCheckBox().Item2);

        string fileName = _fileName;
        string fileSize = _fileSize;
        string dateTime = now.ToString();
        int countParagraph = massExctracter.CountElementsSectionParagraph().Item1;
        string textParagraph = string.Join("<br/>", massExctracter.CountElementsSectionParagraph().Item2);

        int countTable = massExctracter.GetSectionTable().Item1;
        int countTableParagCount = massExctracter.GetSectionTable().Item2;
        int countTableRow = massExctracter.GetSectionTable().Item3;
        int countTableBulletPoint = massExctracter.GetSectionTable().Item4;

        string tableTextParagList = string.Join("<br/>", massExctracter.GetSectionTable().Item5);
        string tableTextRowList = string.Join("<br/>", massExctracter.GetSectionTable().Item6);
        string tableTextBulletPointList = string.Join("<br/>", massExctracter.GetSectionTable().Item7);

        GeneratorPDF generatorPDF = new GeneratorPDF();
        IsLoading = true;
        this.StateHasChanged(); // Trigger a re-render to update the PDF embed

        string outputPath = JsonHelper.ReportPathName(env.WebRootPath);
        generatorPDF.GeneratePDFFromTitle(titleMess,
            countTableHeader,
            countHeader,
            textTableHeader,
            textHeader,
            countCheckBox,
            textCheckBox,
            fileName,
            fileSize,
            dateTime,
            countParagraph,
            textParagraph,
            countTable.ToString(),
            countTableParagCount.ToString(),
            countTableRow.ToString(),
            countTableBulletPoint.ToString(),
            tableTextParagList.ToString(),
            tableTextRowList.ToString(),
            tableTextBulletPointList.ToString(),
            outputPath);

        //Make Refresh Iframe
        pdfSrc = outputPath; // Update the pdfSrc variable with the output path
        this.StateHasChanged(); // Trigger a re-render to update the PDF embed
        uniqueKey = Guid.NewGuid().ToString();
        this.StateHasChanged();
        IsLoading = false;
        this.StateHasChanged();
        IsViewLoading = false;
        this.StateHasChanged();
    }
}