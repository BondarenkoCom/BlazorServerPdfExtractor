@page "/ExtractPdf"
@using System.IO
@using DinkToPdf
@using ExtractLibrary
@using ExtractLibrary.ExtractFromJson
@using ExtractLibrary.Helpers
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using SpecFlowPdfReader.Helpers
@inject IWebHostEnvironment env

<h3>Extract PDF</h3>

<p>
    <InputFile OnChange="@HandleFileSelected" MaxFileSize="104857600" disabled="@IsExtracting" />
    <button @onclick="ButtonClicked" disabled=@(IsExtracting)>Extract Text</button>
    <button @onclick="GeneratePDFreport" disabled="@(!ViewButtonEnabled)">View</button>
    <textarea rows="5" cols="40" @bind="MyText"></textarea>
</p>

@if (IsLoading)
{
    <p style="color: red; background-color: black; border-radius: 50px; width: 130px; padding: 5px; box-sizing: border-box; font-size: 20px; font-family: 'Roboto', sans-serif;">Upload...</p>

}
@if (IsExtracting)
{
    <p style="color: red; background-color: black; border-radius: 50px; width: 130px; padding: 5px; box-sizing: border-box; font-size: 20px; font-family: 'Roboto', sans-serif;">Extracting...</p>
}

<iframe src="@($"/reports/report.pdf?unique={uniqueKey}")" width="100%" height="800px"></iframe>

@code {

    private string MyText { get; set; }
    private string Report { get; set; }
    private bool IsLoading { get; set; }
    private bool IsExtracting { get; set; }
    private string FilePath { get; set; }
    private bool ViewButtonEnabled { get; set; }
    private string pdfSrc { get; set; }
    private bool IsViewClick { get; set; }
    private string uniqueKey { get; set; } = Guid.NewGuid().ToString();
    private string _fileName;
    private string _fileSize;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        string targetFolderPath = JsonHelper.GetFolderTargetForExtract();
        IReadOnlyList<IBrowserFile> selectedFiles;
        selectedFiles = e.GetMultipleFiles();

        IsLoading = true;
        this.StateHasChanged();

        foreach (var file in selectedFiles)
        {

            var path = $"{targetFolderPath}\\{file.Name}";
            FilePath = path;
            _fileName = file.Name;
            _fileSize = file.Size.ToString();

            FileStream fs = File.Create(path);

            const int bufferSize = 10 * 1024 * 1024; // 10 MB buffer size
            byte[] buffer = new byte[bufferSize];

            using (Stream stream = file.OpenReadStream(maxAllowedSize: 2000000))
            {
                int bytesRead;
                while ((bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length)) > 0)
                {
                    await fs.WriteAsync(buffer, 0, bytesRead);
                }
            }

            fs.Close();
        }
        IsLoading = false;
        this.StateHasChanged();
    }


    private async void ButtonClicked()
    {

        string pdfName = FilePath;
        MyText = $"{pdfName} - begin extract";

        try
        {
            IsExtracting = true;
            this.StateHasChanged();

            ExtractPDF extractPDF = new ExtractPDF();
            await extractPDF.ExtractTextFromPDF(pdfName);

            IsExtracting = false;
            ViewButtonEnabled = true; // Update the property here
            this.StateHasChanged();

        }
        catch (Exception ex)
        {
            MyText = $"Error: {ex.Message}";
        }
    }

    private async void GeneratePDFreport()
    {
        DateTime now = DateTime.Now;
        MassExctracter massExctracter = new MassExctracter();
        var titleMess = massExctracter.CountTitle();
        
        int countTableHeader = massExctracter.CountElementsTable().Item1;
        int countHeader = massExctracter.CountElementsTable().Item2;
        
        string textTableHeader = string.Join("br/",massExctracter.CountElementsTable().Item3);
        string textHeader = string.Join("br/",massExctracter.CountElementsTable().Item4);


        int countCheckBox = massExctracter.CountElementsCheckBox().Item1;
        string textCheckBox = string.Join("br/", massExctracter.CountElementsCheckBox().Item2); 

        string fileName = _fileName;
        string fileSize = _fileSize;
        string dateTime = now.ToString();
        int countParagraph = massExctracter.CountElementsSectionParagraph().Item1;
        string textParagraph = string.Join("<br/>", massExctracter.CountElementsSectionParagraph().Item2);

        int countTable = massExctracter.GetSectionTable().Item1;
        int countTableParagCount = massExctracter.GetSectionTable().Item2;
        int countTableRow = massExctracter.GetSectionTable().Item3;
        int countTableBulletPoint = massExctracter.GetSectionTable().Item4;

        string tableTextParagList = string.Join("<br/>", massExctracter.GetSectionTable().Item5);
        string tableTextRowList = string.Join("<br/>", massExctracter.GetSectionTable().Item6);
        string tableTextBulletPointList = string.Join("<br/>", massExctracter.GetSectionTable().Item7);

        GeneratorPDF generatorPDF = new GeneratorPDF();
        IsLoading = true;
        this.StateHasChanged(); // Trigger a re-render to update the PDF embed

        string outputPath = JsonHelper.ReportPathName(env.WebRootPath);
        generatorPDF.GeneratePDFFromTitle(titleMess,
            countTableHeader,
            countHeader,
            textTableHeader,
            textHeader,
            countCheckBox,
            textCheckBox,
            fileName,
            fileSize,
            dateTime,
            countParagraph,
            textParagraph,
            countTable.ToString(),
            countTableParagCount.ToString(),
            countTableRow.ToString(),
            countTableBulletPoint.ToString(),
            tableTextParagList.ToString(),
            tableTextRowList.ToString(),
            tableTextBulletPointList.ToString(),
            outputPath);

        //Make Refresh Iframe
        pdfSrc = outputPath; // Update the pdfSrc variable with the output path
        this.StateHasChanged(); // Trigger a re-render to update the PDF embed
        uniqueKey = Guid.NewGuid().ToString();
        this.StateHasChanged();
        IsLoading = false;
        this.StateHasChanged();

    }
}