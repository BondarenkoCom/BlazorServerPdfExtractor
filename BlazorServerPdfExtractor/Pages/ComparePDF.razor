@page "/ComparePDF"
@using System.IO
@using ExtractLibrary
@using ExtractLibrary.Helpers
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using SpecFlowPdfReader.Helpers
@using System.Text
@inject IWebHostEnvironment env

<h3>ComparePDF</h3>

<div class="container">
    <div class="button-row">
        <InputFile OnChange="@OnFileSelectedFirst" MaxFileSize="104857600" accept="application/pdf" disabled="@IsCompare" />
        <InputFile OnChange="@OnFileSelectedSecond" MaxFileSize="104857600" accept="application/pdf" disabled="@IsCompare" />
        <button class="btn btn-primary" @onclick="ComparePDFfiles" disabled="@IsCompare">Compare PDF</button>
        <button class="btn btn-danger" @onclick="CleanReport">Clean report</button>
    </div>
    <div>
        <textarea class="form-control text-area-spacing" rows="1" cols="80" @bind="MyText"></textarea>
    </div>
</div>

@if (IsLoading)
{
    <div class="alert alert-primary" role="alert">
        Uploading...
    </div>
}

@if (IsCompare)
{
    <div class="alert alert-primary" role="alert">
        Comparing...
    </div>
}

<iframe class="pdf-frame" src="@($"/reports/report.pdf?unique={uniqueKey}#zoom=150")" width="100%" height="800px"></iframe>

<style>
    /* Existing styles */
    .container {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }

    .button-row {
        display: flex;
        gap: 10px;
        margin-bottom: 10px;
    }

    .form-control {
        margin-bottom: 12px;
    }

    .btn {
        display: inline-block;
        background-color: #007bff;
        border-color: #007bff;
        color: #fff;
        text-align: center;
        vertical-align: middle;
        padding: 6px 12px;
        font-size: 14px;
        line-height: 1.5;
        border-radius: 3px;
        cursor: pointer;
        user-select: none;
        text-decoration: none;
    }

    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }

    .btn[disabled] {
        cursor: not-allowed;
        opacity: 0.65;
        background-color: #007bff;
        border-color: #007bff;
    }

    body .container {
        position: relative;
        top: 60px;
        left: 60px;
    }

    h3 {
        font-size: 24px;
        color: #007bff;
        font-weight: bold;
        margin-bottom: 20px;
    }

    .pdf-frame {
        margin-top: 50px;
        border: 15px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
</style>


@code {
    private string _message = "";
    private bool IsLoading { get; set; }
    private string _fileNameFirst;
    private string _fileNameSecond;
    private string _fileSize;
    private string FilePathCopyFirst { get; set; }
    private string FilePathCopySecond { get; set; }
    private string MyText { get; set; }
    private bool IsCompare { get; set; }
    private string Report { get; set; }
    private string jsonFolder = JsonHelper.GetFolderJsonResult();
    private string uniqueKey { get; set; } = Guid.NewGuid().ToString();
    private string pdfSrc { get; set; }
    private string _reportPath;
    private string _tempFoldePath;


    private async Task OnFileSelectedFirst(InputFileChangeEventArgs e)
    {
        string targetFolderPath = JsonHelper.GetFolderTargetForExtract();
        IReadOnlyList<IBrowserFile> selectedFiles;
        selectedFiles = e.GetMultipleFiles();

        IsLoading = true;
        this.StateHasChanged();

        foreach (var file in selectedFiles)
        {

            var pathFirstCopy = $"{targetFolderPath}\\Copy1{file.Name}";
            FilePathCopyFirst = pathFirstCopy;
            _fileNameFirst = file.Name;
            _fileSize = file.Size.ToString();

            FileStream fs = File.Create(pathFirstCopy);

            const int bufferSize = 10 * 1024 * 1024; // 10 MB buffer size
            byte[] buffer = new byte[bufferSize];

            using (Stream stream = file.OpenReadStream(maxAllowedSize: 2000000))
            {
                int bytesRead;
                while ((bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length)) > 0)
                {
                    await fs.WriteAsync(buffer, 0, bytesRead);
                }
            }

            fs.Close();
        }
        IsLoading = false;
        this.StateHasChanged();
    }

    private async Task OnFileSelectedSecond(InputFileChangeEventArgs e)
    {
        string targetFolderPath = JsonHelper.GetFolderTargetForExtract();
        IReadOnlyList<IBrowserFile> selectedFiles;
        selectedFiles = e.GetMultipleFiles();

        IsLoading = true;
        this.StateHasChanged();

        foreach (var file in selectedFiles)
        {

            var pathSecondCopy = $"{targetFolderPath}\\Copy2{file.Name}";
            FilePathCopySecond = pathSecondCopy;
            _fileNameSecond = file.Name;
            _fileSize = file.Size.ToString();
            FileStream fs = File.Create(pathSecondCopy);

            const int bufferSize = 10 * 1024 * 1024; // 10 MB buffer size
            byte[] buffer = new byte[bufferSize];

            using (Stream stream = file.OpenReadStream(maxAllowedSize: 2000000))
            {
                int bytesRead;
                while ((bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length)) > 0)
                {
                    await fs.WriteAsync(buffer, 0, bytesRead);
                }
            }

            fs.Close();
        }
        IsLoading = false;
        this.StateHasChanged();
    }

    private async void ComparePDFfiles()
    {
        DateTime now = DateTime.Now;
        string pdfNameFirst = FilePathCopyFirst;
        string pdfNameSecond = FilePathCopySecond;
        MyText = $"{pdfNameFirst} - begin extract first PDF";
        MyText = $"{pdfNameSecond} - begin extract second PDF";
        string fileNameFirst = _fileNameFirst;
        string fileNameSecond = _fileNameSecond;

        string dateTime = now.ToString();

        try
        {
            IsCompare = true;
            this.StateHasChanged();

            ExtractPDF extractPDFCopyFirst = new ExtractPDF();
            var resultFirst = await extractPDFCopyFirst.ExtractTextFromPDFForCompare(pdfNameFirst);

            ExtractPDF extractPDFCopySecond = new ExtractPDF();
            var resultSecond = await extractPDFCopySecond.ExtractTextFromPDFForCompare(pdfNameSecond);

            Console.WriteLine($"First path - {resultFirst} \n  Second path - {resultSecond}");

            ComparingPDF comparingPDF = new ComparingPDF();

            //Debug
            //Dictionary<string, (string, string)> differences = comparingPDF.TestCompare(
            //   resultFirst, @"D:\source\BlazorServerPdfExtractor\BlazorServerPdfExtractor\JsonResults\PQI5P.json");

            Dictionary<string, (string, string)> differences = comparingPDF.TestCompare(
               resultFirst, resultSecond);


            if (differences == null || differences.Count == 0)
            {
                Report = "Passed";
            }
            else
            {
                StringBuilder reportBuilder = new StringBuilder();

                foreach (var diff in differences)
                {
                    reportBuilder.AppendLine($"<div class=\"difference\">");
                    reportBuilder.AppendLine($"  <div class=\"difference-key\">Results - {diff.Key}:</div>");
                    reportBuilder.AppendLine($"  <div class=\"difference-file1\">{_fileNameFirst}: {diff.Value.Item1}</div>");
                    reportBuilder.AppendLine($"  <div class=\"difference-file2\">{_fileNameSecond}: {diff.Value.Item2}</div>");
                    reportBuilder.AppendLine($"</div>");
                }

                GeneratorPDF generatorPDF = new GeneratorPDF();
                string outputPath = JsonHelper.ReportPathName(env.WebRootPath);

                generatorPDF.GeneratePDFForCompare(_fileNameFirst, _fileNameSecond, dateTime, reportBuilder.ToString(), outputPath);

                pdfSrc = outputPath; // Update the pdfSrc variable with the output path
                this.StateHasChanged();

                uniqueKey = Guid.NewGuid().ToString(); // Update the uniqueKey variable to force a refresh
                this.StateHasChanged();

            }
            IsCompare = false;
            this.StateHasChanged();

            FolderContent.ClearFolderContents(jsonFolder);
        }
        catch (Exception ex)
        {
            MyText = $"Error: {ex.Message}";
            IsCompare = false;
            this.StateHasChanged();

            //Clear Garbage
            FolderContent.ClearFolderContents(jsonFolder);
        }
    }

    private async void CleanReport()
    {
        _reportPath = Path.Combine(env.WebRootPath, "reports", "report.pdf");
        _tempFoldePath = Path.Combine("tempZip");

        try
        {
            if (File.Exists(_reportPath))
            {
                File.Delete(_reportPath);
                RemoveIframeSource(); // delete Iframe source
            }

            DirectoryInfo tempFolder = new DirectoryInfo(_tempFoldePath);

            if (tempFolder.Exists)
            {
                foreach (FileInfo file in tempFolder.GetFiles())
                {
                    file.Delete();
                }
            }
        }
        catch (Exception ex)
        {
            MyText = ex.Message;
        }
    }

    private void RemoveIframeSource()
    {
        uniqueKey = Guid.NewGuid().ToString();
        this.StateHasChanged(); // Update component
    }
}