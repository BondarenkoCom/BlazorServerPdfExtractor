@page "/extractTextFont"
@using System.IO
@using DinkToPdf
@using ExtractLibrary
@using ExtractLibrary.ExtractFromJson
@using ExtractLibrary.Helpers
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using SpecFlowPdfReader.Helpers
@inject IWebHostEnvironment env
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

<h3 class="header">Extract text by font</h3>

<div class="container">
    <div class="button-row">
        <div class="input-file-container">
            <InputFile OnChange="@HandleFileSelected" MaxFileSize="104857600" disabled="@IsExtracting" />
        </div>
        <input id="fontType" type="text" @bind="FontType" placeholder="Enter Font Type" class="form-control">
        <button class="btn btn-primary" @onclick="ButtonClicked" disabled=@(!FileSelected || IsExtracting)>Extract Text</button>
        <button class="btn btn-success" @onclick="GeneratePDFreport" disabled="@IsExtracting">View</button>
        <button class="btn btn-danger" @onclick="CleanReport" disabled="@IsExtracting">Clean report</button>
    </div>
</div>

@if (HasSuccess)
{
    <div class="alert alert-success" role="alert" style="margin-top: 60px;">
        Operation was successful! File saved to: @SuccessAlert
    </div>
}

@if (IsLoading)
{
    <div class="alert alert-primary" role="alert" style="margin-top: 60px;">
        Uploading...
    </div>
}

@if (IsExtracting)
{
    <div class="alert alert-primary" role="alert" style="margin-top: 60px;">
        Extracting...
    </div>
}

@if (IsViewLoading)
{
    <div class="alert alert-primary" role="alert" style="margin-top: 60px;">
        Loading report...
    </div>
}

@if (HasError)
{
    <div class="alert alert-danger" role="alert" style="margin-top: 60px;">
        @ErrorAlert
    </div>
}

<iframe class="pdf-frame" src="@($"")" width="100%" height="800px"></iframe>

@code {
    private string MyText { get; set; }
    private string Report { get; set; }
    private bool IsLoading { get; set; }
    private bool IsExtracting { get; set; }
    private bool IsViewLoading { get; set; }
    private string FilePath { get; set; }
    private bool ViewButtonEnabled { get; set; }
    private string pdfSrc { get; set; }
    private bool IsViewClick { get; set; }
    private string uniqueKey { get; set; } = Guid.NewGuid().ToString();
    private string _fileName;
    private string _fileSize;
    private string _fileNamePDF;
    private string _reportPath;
    private bool FileSelected { get; set; } = false;
    private string _tempFoldePath;
    private string FontType = "TrueType";
    private bool HasError { get; set; } = false;
    private string ErrorAlert { get; set; }
    private bool HasSuccess { get; set; } = false;
    private string SuccessAlert { get; set; }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {

            string targetFolderPath = JsonHelper.GetFolderTargetForExtract();
            IReadOnlyList<IBrowserFile> selectedFiles;
            selectedFiles = e.GetMultipleFiles();

            IsLoading = true;
            await InvokeAsync(StateHasChanged);

            foreach (var file in selectedFiles)
            {
                var uniqueFileName = file.Name + "_" + Guid.NewGuid().ToString() + Path.GetExtension(file.Name);
                await JSRuntime.InvokeVoidAsync("saveFileName", file.Name);
                var path = $"{targetFolderPath}\\{uniqueFileName}";
                FilePath = path;
                _fileName = uniqueFileName;
                _fileSize = file.Size.ToString();

                using (FileStream fs = File.Create(path))
                {
                    const int bufferSize = 10 * 1024 * 1024; // 10 MB buffer size
                    byte[] buffer = new byte[bufferSize];

                    using (Stream stream = file.OpenReadStream(maxAllowedSize: 104857600)) // 100 MB
                    {
                        int bytesRead;
                        while ((bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length)) > 0)
                        {
                            await fs.WriteAsync(buffer, 0, bytesRead);
                        }
                    }
                }
            }
            IsLoading = false;
            FileSelected = true;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            HasError = true;
            IsLoading = false;
            ErrorAlert = ex.Message;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task CleanReport()
    {
        _reportPath = Path.Combine(env.WebRootPath, "reports");
        _tempFoldePath = Path.Combine("tempZip");

        try
        {
            DirectoryInfo reportFolder = new DirectoryInfo(_reportPath);
            if (reportFolder.Exists)
            {
                foreach (FileInfo file in reportFolder.GetFiles())
                {
                    file.Delete();
                }
                foreach (DirectoryInfo dir in reportFolder.GetDirectories())
                {
                    dir.Delete(true);
                }
            }

            DirectoryInfo tempFolder = new DirectoryInfo(_tempFoldePath);
            if (tempFolder.Exists)
            {
                foreach (FileInfo file in tempFolder.GetFiles())
                {
                    file.Delete();
                }
                foreach (DirectoryInfo dir in tempFolder.GetDirectories())
                {
                    dir.Delete(true);
                }
            }
        }
        catch (Exception ex)
        {
            HasError = true;
            ErrorAlert = ex.Message;
            await InvokeAsync(StateHasChanged);
        }
    }

    protected override void OnInitialized()
    {
        NavManager.LocationChanged += NavManager_LocationChanged;
    }

    private void NavManager_LocationChanged(object sender, LocationChangedEventArgs e)
    {
        CleanReport();
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= NavManager_LocationChanged;
        CleanReport().Wait();
    }

    private async Task RemoveIframeSource()
    {
        uniqueKey = Guid.NewGuid().ToString();
        await InvokeAsync(StateHasChanged);
    }

    private async Task ButtonClicked()
    {
        string pdfName = FilePath;
        MyText = $"{pdfName} - begin extract";

        try
        {

            IsExtracting = true;
            await InvokeAsync(StateHasChanged);

            ExtractPDF extractPDF = new ExtractPDF();
            var result = await extractPDF.ExtractTextFromPDF(pdfName);

            if (result.Item1 != "Success")
            {
                ErrorAlert = $"Error: {result.Item1}";
                HasError = true;
            }
            else
            {
                SuccessAlert = result.Item2;
                HasSuccess = true;
                HasError = false;

                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "jsonPath", SuccessAlert);
            }

            IsExtracting = false;
            ViewButtonEnabled = true;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            MyText = $"Error: {ex.Message}";
        }
    }

    private async Task GeneratePDFreport()
    {
        try
        {
            IsViewLoading = true;
            await InvokeAsync(StateHasChanged);

            DateTime now = DateTime.Now;
            string dateTime = now.ToString();

            string jsonFileName = string.IsNullOrEmpty(SuccessAlert)
           ? await JSRuntime.InvokeAsync<string>("getJsonPath")
           : SuccessAlert;

            if (string.IsNullOrEmpty(jsonFileName))
            {
                throw new Exception("Json file name is not provided");
            }
            _fileName = jsonFileName;
            _fileSize = new FileInfo(jsonFileName).Length.ToString();

            MassExctracter massExctracter = new MassExctracter(jsonFileName);

            int countFonts = massExctracter.CountElementFont(FontType).Item1;
            var textFontsType = string.Join("<hr/>", massExctracter.CountElementFont(FontType).Item2);

            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "fontType", FontType);

            string textByFonts = FontType;

            GeneratorPDF generatorPDF = new GeneratorPDF();
            string uniqueKeyForPAth = Guid.NewGuid().ToString().Substring(0, 5);

            await JSRuntime.InvokeVoidAsync("savePdfSrc", uniqueKeyForPAth);

            IsLoading = true;
            await InvokeAsync(StateHasChanged);

            _fileNamePDF = await JSRuntime.InvokeAsync<string>("getFileName");

            if (env.WebRootPath != null && uniqueKeyForPAth != null)
            {
                string outputPath = JsonHelper.ReportPathName(env.WebRootPath, uniqueKeyForPAth).Item1;

                generatorPDF.GenerateHtmlFromFont(
                    jsonFileName,
                    _fileNamePDF,
                    _fileSize,
                    dateTime,
                    countFonts,
                    textFontsType,
                    textByFonts,
                    outputPath);
            }
            else
            {
                throw new Exception("WebRootPath or uniqueKeyForPAth is null");
            }

            pdfSrc = uniqueKeyForPAth;
            await InvokeAsync(StateHasChanged);
            uniqueKey = Guid.NewGuid().ToString();
            await InvokeAsync(StateHasChanged);
            IsViewLoading = false;
            await InvokeAsync(StateHasChanged);

        }
        catch (Exception ex)
        {
            HasError = true;
            ErrorAlert = ex.Message;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task CleanTempFolder()
    {
        _tempFoldePath = Path.Combine("tempZip");
        try
        {
            DirectoryInfo tempFolder = new DirectoryInfo(_tempFoldePath);
            if (tempFolder.Exists)
            {
                foreach (FileInfo file in tempFolder.GetFiles())
                {
                    try
                    {
                        file.Delete();
                    }
                    catch (IOException ex)
                    {
                        MyText = $"Error: {ex.Message}";
                    }
                }
            }
        }
        catch (Exception ex)
        {
            MyText = ex.Message;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("updateIframeSrc", $"/reports/report_{pdfSrc}.html#zoom=150");
        }
    }
}

<style>
    .container {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }

    .header {
        text-align: center;
        font-family: Arial, sans-serif;
        font-size: 17px;
        color: #007bff;
        font-weight: bold;
        margin-bottom: 20px;
    }

    .button-row {
        display: flex;
        gap: 10px;
        margin-bottom: 10px;
    }

    .form-control {
        margin-bottom: 12px;
    }

    .btn {
        display: inline-block;
        background-color: #007bff;
        border-color: #007bff;
        color: #fff;
        text-align: center;
        vertical-align: middle;
        padding: 6px 12px;
        font-size: 14px;
        line-height: 1.5;
        border-radius: 3px;
        cursor: pointer;
        user-select: none;
        text-decoration: none;
    }

    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }

    .btn-success {
        background-color: #28a745;
        border-color: #28a745;
    }

    .btn[disabled] {
        cursor: not-allowed;
        opacity: 0.65;
        background-color: #007bff;
        border-color: #007bff;
    }

    body .container {
        position: relative;
        top: 60px;
        left: 60px;
    }

    h3 {
        font-size: 24px;
        color: #007bff;
        font-weight: bold;
        margin-bottom: 20px;
    }

    .pdf-frame {
        margin-top: 70px;
        border: 5px solid #007bff;
        border-radius: 15px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
</style>
