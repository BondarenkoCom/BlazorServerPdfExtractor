@page "/ExtractImage"
@using System.IO
@using DinkToPdf
@using ExtractLibrary
@using ExtractLibrary.ExtractFromJson
@using ExtractLibrary.Helpers
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using SpecFlowPdfReader.Helpers
@inject IWebHostEnvironment env

<h3 class="header">Extract Image</h3>


<div class="modal @ModalClass" id="myModal">
    <div class="modal-content">
        <span class="close" @onclick="ToggleModal">&times;</span>
        <p>
            After you've uploaded the file, you can click the "Extract Images" button to start the extraction process.<br>
            The application will read the PDF and extract all images.
        </p>
    </div>
</div>


<div class="container">
    <div class="button-row">
        <div class="file-input-container">
            <InputFile OnChange="@HandleFileSelected" MaxFileSize="104857600" accept="application/pdf" disabled="@IsExtracting" />
            <label for="file-upload" class="custom-file-upload">Upload PDF</label>
            @if (ImageExtractSuccess && !IsLoading)
            {
                <div class="alert alert-success upload-success">Success Extract</div>
            }
            @if (HasError)
            {
                <div class="alert alert-danger upload-error">@ErrorAlert</div>
            }
        </div>
    </div>
    <div class="button-row">
        <div class="info-extract-container">
            <button class="btn btn-info" @onclick="ToggleModal">Info</button>
            <button class="btn btn-primary" @onclick="ButtonClicked" disabled=@(!FileSelected || IsExtracting )>Extract Images</button>
        </div>
        <button class="btn btn-danger" @onclick="CleanImagesFolder">Clean image folder</button>
    </div>
    <div>
        <textarea class="form-control text-area-spacing" rows="1" cols="40" @bind="MyText"></textarea>
    </div>
</div>

@if (HasSuccess)
{
    <div class="alert alert-success" role="alert">
        Operation was successful! File saved to: @SuccessAlert
    </div>
}

@if (IsLoading)
{
    <div class="alert alert-primary" role="alert">
        Uploading...
    </div>
}

@if (IsExtracting)
{
    <div class="alert alert-primary" role="alert">
        Extracting...
    </div>
}

@if (HasError)
{
    <div class="alert alert-danger" role="alert">
        @ErrorAlert
    </div>
}

@if (ImageExtractSuccess && !IsLoading && !IsExtracting)
{
    <div class="alert alert-success" role="alert">
        Extract image successful!
    </div>
}

@code {

    private string MyText { get; set; }
    private string Report { get; set; }
    private bool IsLoading { get; set; }
    private bool IsExtracting { get; set; }
    private bool IsViewLoading { get; set; }
    private string FilePath { get; set; }
    private bool ViewButtonEnabled { get; set; }
    private string pdfSrc { get; set; }
    private bool IsViewClick { get; set; }
    private string uniqueKey { get; set; } = Guid.NewGuid().ToString();
    private string _fileName;
    private string _fileSize;
    private string _reportPath;
    private string _tempFoldePath;
    private bool FileSelected { get; set; } = false;
    private bool HasError { get; set; } = false;
    private string ErrorAlert { get; set; }
    private bool ImageExtractSuccess { get; set; } = false;
    private string ModalClass { get; set; } = "modal-hidden";
    private bool HasSuccess { get; set; } = false;
    private string SuccessAlert { get; set; }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        string targetFolderPath = JsonHelper.GetFolderTargetForExtract();
        IReadOnlyList<IBrowserFile> selectedFiles;
        selectedFiles = e.GetMultipleFiles();

        IsLoading = true;
        this.StateHasChanged();

        foreach (var file in selectedFiles)
        {

            var path = $"{targetFolderPath}\\{file.Name}";
            FilePath = path;
            _fileName = file.Name;
            _fileSize = file.Size.ToString();

            if (File.Exists(path))
            {
                File.Delete(path);
            }

            FileStream fs = File.Create(path);

            const int bufferSize = 10 * 1024 * 1024; // 10 MB buffer size
            byte[] buffer = new byte[bufferSize];

            using (Stream stream = file.OpenReadStream(maxAllowedSize: 104857600)) // 100 MB
            {
                int bytesRead;
                while ((bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length)) > 0)
                {
                    await fs.WriteAsync(buffer, 0, bytesRead);
                }
            }

            fs.Close();
        }
        IsLoading = false;
        FileSelected = true;
        this.StateHasChanged();
    }

    private async void CleanImagesFolder()
    {
        _reportPath = Path.Combine("Images", "extractedImages.zip");
        _tempFoldePath = Path.Combine("Images");

        try
        {
            if (File.Exists(_reportPath))
            {
                File.Delete(_reportPath);
                RemoveIframeSource(); // delete Iframe source
            }

            DirectoryInfo tempFolder = new DirectoryInfo(_tempFoldePath);


            if (tempFolder.Exists)
            {
                foreach (FileInfo file in tempFolder.GetFiles())
                {
                    file.Delete();
                }
            }

        }
        catch (Exception ex)
        {
            MyText = ex.Message;
        }
    }

    private void ToggleModal()
    {
        ModalClass = ModalClass == "modal-hidden" ? "modal-visible" : "modal-hidden";
    }

    private void RemoveIframeSource()
    {
        uniqueKey = Guid.NewGuid().ToString();
        this.StateHasChanged(); // Update component
    }

    private async void ButtonClicked()
    {

        string pdfName = FilePath;
        MyText = $"{pdfName} - begin extract";

        try
        {
            IsExtracting = true;
            this.StateHasChanged();

            ExtractImageFromPDF extractImageFromPDF = new ExtractImageFromPDF();
            var imageResult = await extractImageFromPDF.ExtractImagesFromPDF(pdfName);

            if (imageResult.Item1 != "Success")
            {
                ErrorAlert = $"Error: {imageResult.Item1}";
                HasError = true;
            }
            else
            {
                SuccessAlert = imageResult.Item2;
                HasSuccess = true;
                HasError = false;
            }

            IsExtracting = false;
            ViewButtonEnabled = true; // Update the property here
            this.StateHasChanged();

        }
        catch (Exception ex)
        {
            MyText = $"Error: {ex.Message}";
        }
    }
}



<style>
    .container {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }

    .header {
        text-align: center;
        font-family: Arial, sans-serif;
        font-size: 17px;
        color: #007bff;
        font-weight: bold;
        margin-bottom: 20px;
    }

    .button-row {
        display: flex;
        gap: 10px;
        margin-bottom: 10px;
    }

    .form-control {
        margin-bottom: 12px;
    }

    .alert-success {
        color: #155724;
        background-color: #d4edda;
        border-color: #c3e6cb;
    }

    .btn {
        display: inline-block;
        background-color: #007bff;
        border-color: #007bff;
        color: #fff;
        text-align: center;
        vertical-align: middle;
        padding: 6px 12px;
        font-size: 14px;
        line-height: 1.5;
        border-radius: 3px;
        cursor: pointer;
        user-select: none;
        text-decoration: none;
    }

    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }

    .btn-success {
        background-color: #28a745;
        border-color: #28a745;
    }

    .btn[disabled] {
        cursor: not-allowed;
        opacity: 0.65;
        background-color: #007bff;
        border-color: #007bff;
    }

    body .container {
        position: relative;
        top: 60px;
        left: 60px;
    }

    h3 {
        font-size: 24px;
        color: #007bff;
        font-weight: bold;
        margin-bottom: 20px;
    }

    .pdf-frame {
        margin-top: 50px;
        border: 15px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .text-area-spacing {
        margin-bottom: 12px;
    }

    .modal-hidden {
        display: none;
    }

    .modal-visible {
        display: block;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
    }

</style>